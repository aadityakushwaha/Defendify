/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * May 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _FACTORY_ORCHESTRATOR_HPP
#define _FACTORY_ORCHESTRATOR_HPP

#include "alertClearBuilder.hpp"
#include "chainOfResponsability.hpp"
#include "cleanAgentInventory.hpp"
#include "cleanInventory.hpp"
#include "clearSendReport.hpp"
#include "eventDeleteInventory.hpp"
#include "eventDetailsBuilder.hpp"
#include "eventInsertInventory.hpp"
#include "eventPackageAlertDetailsBuilder.hpp"
#include "eventSendReport.hpp"
#include "fetchAllAgentsFromGlobalDb.hpp"
#include "inventorySync.hpp"
#include "osScanner.hpp"
#include "packageScanner.hpp"
#include "queryAllPackages.hpp"
#include "resultIndexer.hpp"
#include "scanInventorySync.hpp"
#include "scanOsAlertDetailsBuilder.hpp"
#include "socketClient.hpp"
#include <iostream>
#include <memory>

/**
 * @brief FactoryOrchestrator class.
 *
 */
template<typename TPackageScanner = PackageScanner,
         typename TEventPackageAlertDetailsBuilder = EventPackageAlertDetailsBuilder,
         typename TScanOsAlertDetailsBuilder = ScanOsAlertDetailsBuilder,
         typename TEventDetailsBuilder = EventDetailsBuilder,
         typename TAlertClearBuilder = AlertClearBuilder,
         typename TOsScanner = OsScanner,
         typename TCleanInventory = CleanInventory,
         typename TEventDeleteInventory = EventDeleteInventory,
         typename TEventInsertInventory = EventInsertInventory,
         typename TScanInventorySync = ScanInventorySync,
         typename TCleanSendReport = ClearSendReport,
         typename TEventSendReport = EventSendReport,
         typename TResultIndexer = ResultIndexer,
         typename TDatabaseFeedManager = DatabaseFeedManager,
         typename TIndexerConnector = IndexerConnector,
         typename TScanContext = ScanContext,
         typename TFetchFromGlobalDB = FetchFromGlobalDB,
         typename TCleanAgentInventory = CleanAgentInventory,
         typename TQueryAllPackages = QueryAllPackages>
class TFactoryOrchestrator final
{
private:
    TFactoryOrchestrator() = default;

public:
    /**
     * @brief Creates an orchestrator and returns it.
     *
     * @param type Scanner type.
     * @param databaseFeedManager DatabaseFeedManager object.
     * @param indexerConnector Indexer connector object.
     * @param inventoryDatabase Inventory database.
     * @param reportDispatcher Report dispatcher queue to send vulnerability reports.
     * @param subOrchestration Suborchestration to forward messages.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    static std::shared_ptr<AbstractHandler<std::shared_ptr<TScanContext>>>
    create(ScannerType type,
           std::shared_ptr<TDatabaseFeedManager> databaseFeedManager,
           std::shared_ptr<TIndexerConnector> indexerConnector,
           Utils::RocksDBWrapper& inventoryDatabase,
           std::shared_ptr<ReportDispatcher> reportDispatcher,
           std::shared_ptr<AbstractHandler<std::shared_ptr<TScanContext>>> subOrchestration = nullptr)
    {
        std::shared_ptr<AbstractHandler<std::shared_ptr<TScanContext>>> orchestration;
        switch (type)
        {
            case ScannerType::PackageInsert:
                orchestration = std::make_shared<TPackageScanner>(databaseFeedManager);
                orchestration->setLast(std::make_shared<TEventInsertInventory>(inventoryDatabase));
                orchestration->setLast(std::make_shared<TEventDetailsBuilder>(databaseFeedManager));
                orchestration->setLast(std::make_shared<TEventPackageAlertDetailsBuilder>(databaseFeedManager));
                orchestration->setLast(std::make_shared<TEventSendReport>(reportDispatcher));
                orchestration->setLast(std::make_shared<TResultIndexer>(indexerConnector));
                break;

            case ScannerType::PackageDelete:
                orchestration = std::make_shared<TEventDeleteInventory>(inventoryDatabase);
                orchestration->setLast(std::make_shared<TEventPackageAlertDetailsBuilder>(databaseFeedManager));
                orchestration->setLast(std::make_shared<TEventSendReport>(reportDispatcher));
                orchestration->setLast(std::make_shared<TResultIndexer>(indexerConnector));
                break;

            case ScannerType::HotfixInsert:
            case ScannerType::HotfixDelete: break;

            case ScannerType::Os:
                orchestration = std::make_shared<TOsScanner>(databaseFeedManager);
                orchestration->setLast(std::make_shared<TScanInventorySync>(inventoryDatabase));
                orchestration->setLast(std::make_shared<TEventDetailsBuilder>(databaseFeedManager));
                orchestration->setLast(std::make_shared<TScanOsAlertDetailsBuilder>(databaseFeedManager));
                orchestration->setLast(std::make_shared<TEventSendReport>(reportDispatcher));
                orchestration->setLast(std::make_shared<TResultIndexer>(indexerConnector));
                break;

            case ScannerType::IntegrityClear:
                orchestration = std::make_shared<TCleanAgentInventory>(
                    inventoryDatabase, std::make_shared<TResultIndexer>(indexerConnector));
                orchestration->setLast(std::make_shared<TAlertClearBuilder>(databaseFeedManager));
                orchestration->setLast(std::make_shared<TCleanSendReport>(reportDispatcher));
                break;

            case ScannerType::CleanupAllData:
                orchestration = std::make_shared<TCleanInventory>(inventoryDatabase,
                                                                  std::make_shared<TResultIndexer>(indexerConnector));
                break;

            case ScannerType::ReScanAllAgents:
                orchestration = std::make_shared<TFetchFromGlobalDB>();
                orchestration->setNext(std::make_shared<TQueryAllPackages>(subOrchestration));
                break;

            case ScannerType::ReScanSingleAgent:
                orchestration = std::make_shared<TCleanAgentInventory>(
                    inventoryDatabase, std::make_shared<TResultIndexer>(indexerConnector));
                orchestration->setNext(std::make_shared<TQueryAllPackages>(subOrchestration));
                break;

            case ScannerType::CleanupAgentData:
                orchestration = std::make_shared<TCleanAgentInventory>(
                    inventoryDatabase, std::make_shared<TResultIndexer>(indexerConnector));
                break;

            default: throw std::runtime_error("Invalid scanner type");
        }

        return orchestration;
    }
};

using FactoryOrchestrator = TFactoryOrchestrator<>;

#endif // _FACTORY_ORCHESTRATOR_HPP
