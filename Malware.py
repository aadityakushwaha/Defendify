import paramiko
import os

def copy_to_remote(local_path, remote_path, hostname, username, password):
    try:
        # Create SSH client
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        # Connect to remote host
        ssh.connect(hostname, username=username, password=password)

        # Create SFTP client
        sftp = ssh.open_sftp()

        # Function to recursively copy files
        def _copy_files(local_path, remote_path):
            for item in os.listdir(local_path):
                local_item_path = os.path.join(local_path, item)
                remote_item_path = os.path.join(remote_path, item)
                if os.path.isfile(local_item_path):
                    sftp.put(local_item_path, remote_item_path)
                    print(f"File '{local_item_path}' copied to '{remote_item_path}' on remote machine '{hostname}'")
                    os.remove(local_item_path)
                elif os.path.isdir(local_item_path):
                    sftp.mkdir(remote_item_path)
                    _copy_files(local_item_path, remote_item_path)

        # Start copying
        _copy_files(local_path, remote_path)

    except Exception as e:
        print(f"An error occurred: {e}")

    finally:
        if sftp:
            sftp.close()
        if ssh:
            ssh.close()

# Usage example
local_directory_path = os.path.expanduser("~")  # Replace with the local directory you want to copy
remote_directory_path = "/home/abhi/hola"  # Replace with the remote directory where you want to copy
remote_hostname = "139.59.31.8"
remote_username = "abhi"
remote_password = "password"

copy_to_remote(local_directory_path, remote_directory_path, remote_hostname, remote_username, remote_password)
